//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFExampleProject.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbTrainingEntities : DbContext
    {
        public dbTrainingEntities()
            : base("name=dbTrainingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_Doctor> tbl_Doctor { get; set; }
        public virtual DbSet<tbl_Patient> tbl_Patient { get; set; }
        public virtual DbSet<tbl_appointment> tbl_appointment { get; set; }
    
        public virtual int proc_Delete_Doctor(Nullable<int> did)
        {
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Delete_Doctor", didParameter);
        }
    
        public virtual int proc_Insert_Doctor(string dname, Nullable<double> exp)
        {
            var dnameParameter = dname != null ?
                new ObjectParameter("dname", dname) :
                new ObjectParameter("dname", typeof(string));
    
            var expParameter = exp.HasValue ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Insert_Doctor", dnameParameter, expParameter);
        }
    
        public virtual int proc_Update_Doctor_Exp(Nullable<int> did, Nullable<double> exp)
        {
            var didParameter = did.HasValue ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(int));
    
            var expParameter = exp.HasValue ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Update_Doctor_Exp", didParameter, expParameter);
        }
    }
}
